// <auto-generated />
using System;
using Base.Persistence.DbContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Base.Persistence.Migrations.Papara
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250504195347_AddConcludedToExpense")]
    partial class AddConcludedToExpense
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Base.Domain.Identity.RefreshToken", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("CreatedById")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<long?>("DeletedById")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("DeletedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("Expiration")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("TokenHash")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("TokenSalt")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<long?>("UpdatedById")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("UpdatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens", "Base");
                });

            modelBuilder.Entity("Base.Domain.Identity.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("CreatedById")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<long?>("DeletedById")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("DeletedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LastLoginDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("OpenDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("Role")
                        .HasColumnType("tinyint");

                    b.Property<string>("Secret")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<long?>("UpdatedById")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("UpdatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("Users", "Base");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedById = 0L,
                            CreatedDate = new DateTimeOffset(new DateTime(2025, 5, 4, 19, 53, 46, 296, DateTimeKind.Unspecified).AddTicks(8384), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "admin@papara.com",
                            IsActive = true,
                            OpenDate = new DateTimeOffset(new DateTime(2025, 5, 4, 19, 53, 46, 296, DateTimeKind.Unspecified).AddTicks(8384), new TimeSpan(0, 0, 0, 0, 0)),
                            PasswordHash = "$2a$11$ziFo2.s3cw.CUN8LGcDvf.SpDpIkR0GF9LwS2rD7SSCA3J0/Nr90q",
                            Role = (byte)1,
                            Secret = "fedf42ce-b648-4408-87a3-2748b33bbe6f",
                            UserName = "admin"
                        },
                        new
                        {
                            Id = 2L,
                            CreatedById = 0L,
                            CreatedDate = new DateTimeOffset(new DateTime(2025, 5, 4, 19, 53, 46, 296, DateTimeKind.Unspecified).AddTicks(8384), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "ozlem.kalemci@papara.com",
                            IsActive = true,
                            OpenDate = new DateTimeOffset(new DateTime(2025, 5, 4, 19, 53, 46, 296, DateTimeKind.Unspecified).AddTicks(8384), new TimeSpan(0, 0, 0, 0, 0)),
                            PasswordHash = "$2a$11$Gt9Syv6XF0gYISnzVKHwKOm626elyMDsrEcrxd0nbZH9EjOJIQbYq",
                            Role = (byte)2,
                            Secret = "e94c11a8-0df9-48ea-9995-0e2a3bae18ba",
                            UserName = "ozlem.kalemci"
                        },
                        new
                        {
                            Id = 3L,
                            CreatedById = 0L,
                            CreatedDate = new DateTimeOffset(new DateTime(2025, 5, 4, 19, 53, 46, 296, DateTimeKind.Unspecified).AddTicks(8384), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "personel@papara.com",
                            IsActive = true,
                            OpenDate = new DateTimeOffset(new DateTime(2025, 5, 4, 19, 53, 46, 296, DateTimeKind.Unspecified).AddTicks(8384), new TimeSpan(0, 0, 0, 0, 0)),
                            PasswordHash = "$2a$11$B6uJB0q4vhbn.MMhRA4Ccunqyf0ISCm2iyFLE9jpAVGD4nA8xr7Qe",
                            Role = (byte)2,
                            Secret = "87491126-4439-4498-b96b-7074fab9e23f",
                            UserName = "personel1"
                        });
                });

            modelBuilder.Entity("Expense", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("Concluded")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<long>("CreatedById")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<long?>("DeletedById")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("DeletedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<long>("EmployeeId")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("ExpenseDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<long>("ExpenseTypeId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<long?>("UpdatedById")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("UpdatedDate")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("ExpenseTypeId");

                    b.ToTable("Expenses", "Finance");
                });

            modelBuilder.Entity("ExpenseAttachment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<long>("CreatedById")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<long?>("DeletedById")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("DeletedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<long>("ExpenseId")
                        .HasColumnType("bigint");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("OriginalFileName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("StoredFileName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<long?>("UpdatedById")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("UpdatedDate")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("ExpenseId");

                    b.ToTable("ExpenseAttachments", "Finance");
                });

            modelBuilder.Entity("Papara.Domain.Entities.Corporation.Company", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("CompanyIBAN")
                        .IsRequired()
                        .HasMaxLength(34)
                        .HasColumnType("nvarchar(34)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<long>("CreatedById")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<long?>("DeletedById")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("DeletedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("TaxNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<long?>("UpdatedById")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("UpdatedDate")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.ToTable("Companies", "Corporation");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CompanyIBAN = "TR000000000000000000000999",
                            CompanyName = "Papara Şirketi",
                            CreatedById = 0L,
                            CreatedDate = new DateTimeOffset(new DateTime(2025, 5, 4, 19, 53, 46, 644, DateTimeKind.Unspecified).AddTicks(3596), new TimeSpan(0, 0, 0, 0, 0)),
                            IsActive = true,
                            TaxNumber = "1234567890"
                        });
                });

            modelBuilder.Entity("Papara.Domain.Entities.Corporation.Department", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("CreatedById")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<long?>("DeletedById")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("DeletedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<long?>("UpdatedById")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("UpdatedDate")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.ToTable("Departments", "Corporation");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedById = 0L,
                            CreatedDate = new DateTimeOffset(new DateTime(2025, 5, 4, 19, 53, 46, 644, DateTimeKind.Unspecified).AddTicks(6513), new TimeSpan(0, 0, 0, 0, 0)),
                            DepartmentName = "Yönetim",
                            IsActive = true
                        },
                        new
                        {
                            Id = 2L,
                            CreatedById = 0L,
                            CreatedDate = new DateTimeOffset(new DateTime(2025, 5, 4, 19, 53, 46, 644, DateTimeKind.Unspecified).AddTicks(6513), new TimeSpan(0, 0, 0, 0, 0)),
                            DepartmentName = "Operasyon",
                            IsActive = true
                        },
                        new
                        {
                            Id = 3L,
                            CreatedById = 0L,
                            CreatedDate = new DateTimeOffset(new DateTime(2025, 5, 4, 19, 53, 46, 644, DateTimeKind.Unspecified).AddTicks(6513), new TimeSpan(0, 0, 0, 0, 0)),
                            DepartmentName = "Finans",
                            IsActive = true
                        },
                        new
                        {
                            Id = 4L,
                            CreatedById = 0L,
                            CreatedDate = new DateTimeOffset(new DateTime(2025, 5, 4, 19, 53, 46, 644, DateTimeKind.Unspecified).AddTicks(6513), new TimeSpan(0, 0, 0, 0, 0)),
                            DepartmentName = "Yazılım Geliştirme",
                            IsActive = true
                        });
                });

            modelBuilder.Entity("Papara.Domain.Entities.Finance.ExpenseApproval", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("ApprovedById")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("ApprovedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<long>("CreatedById")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<long?>("DeletedById")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("DeletedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<long>("ExpenseId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint");

                    b.Property<long?>("UpdatedById")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("UpdatedDate")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("ExpenseId");

                    b.ToTable("ExpenseApprovals", "Finance");
                });

            modelBuilder.Entity("Papara.Domain.Entities.Finance.ExpenseType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("CreatedById")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<long?>("DeletedById")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("DeletedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<long?>("UpdatedById")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("UpdatedDate")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.ToTable("ExpenseTypes", "Finance");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedById = 0L,
                            CreatedDate = new DateTimeOffset(new DateTime(2025, 5, 4, 19, 53, 46, 296, DateTimeKind.Unspecified).AddTicks(945), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Ulaşım biletleri (uçak, tren, taksi vb.)",
                            IsActive = true,
                            Name = "Ulaşım"
                        },
                        new
                        {
                            Id = 2L,
                            CreatedById = 0L,
                            CreatedDate = new DateTimeOffset(new DateTime(2025, 5, 4, 19, 53, 46, 296, DateTimeKind.Unspecified).AddTicks(951), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Yakıt, bakım, otopark, otoyol geçişleri",
                            IsActive = true,
                            Name = "Araç Giderleri"
                        },
                        new
                        {
                            Id = 3L,
                            CreatedById = 0L,
                            CreatedDate = new DateTimeOffset(new DateTime(2025, 5, 4, 19, 53, 46, 296, DateTimeKind.Unspecified).AddTicks(952), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Kişisel yemek harcamaları",
                            IsActive = true,
                            Name = "Yemek"
                        },
                        new
                        {
                            Id = 4L,
                            CreatedById = 0L,
                            CreatedDate = new DateTimeOffset(new DateTime(2025, 5, 4, 19, 53, 46, 296, DateTimeKind.Unspecified).AddTicks(980), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Otel, konaklama giderleri",
                            IsActive = true,
                            Name = "Konaklama"
                        },
                        new
                        {
                            Id = 5L,
                            CreatedById = 0L,
                            CreatedDate = new DateTimeOffset(new DateTime(2025, 5, 4, 19, 53, 46, 296, DateTimeKind.Unspecified).AddTicks(982), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "İlaç, hastane, tedavi vs.",
                            IsActive = true,
                            Name = "Sağlık Harcamaları"
                        },
                        new
                        {
                            Id = 6L,
                            CreatedById = 0L,
                            CreatedDate = new DateTimeOffset(new DateTime(2025, 5, 4, 19, 53, 46, 296, DateTimeKind.Unspecified).AddTicks(983), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Eğitim programları, sertifika ücretleri",
                            IsActive = true,
                            Name = "Eğitim ve Sertifikalar"
                        },
                        new
                        {
                            Id = 7L,
                            CreatedById = 0L,
                            CreatedDate = new DateTimeOffset(new DateTime(2025, 5, 4, 19, 53, 46, 296, DateTimeKind.Unspecified).AddTicks(984), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "GSM faturaları, internet",
                            IsActive = true,
                            Name = "Telekomünikasyon"
                        },
                        new
                        {
                            Id = 8L,
                            CreatedById = 0L,
                            CreatedDate = new DateTimeOffset(new DateTime(2025, 5, 4, 19, 53, 46, 296, DateTimeKind.Unspecified).AddTicks(985), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Ofis ekipmanları, kırtasiye",
                            IsActive = true,
                            Name = "Ofis ve Kırtasiye Giderleri"
                        },
                        new
                        {
                            Id = 9L,
                            CreatedById = 0L,
                            CreatedDate = new DateTimeOffset(new DateTime(2025, 5, 4, 19, 53, 46, 296, DateTimeKind.Unspecified).AddTicks(986), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Müşteri ağırlama, toplantı ikramları",
                            IsActive = true,
                            Name = "Ağırlama ve İkram"
                        });
                });

            modelBuilder.Entity("Papara.Domain.Entities.HR.Employee", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("CreatedById")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<long?>("DeletedById")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("DeletedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<long>("DepartmentId")
                        .HasColumnType("bigint");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("IBAN")
                        .IsRequired()
                        .HasMaxLength(34)
                        .HasColumnType("nvarchar(34)");

                    b.Property<string>("IdentityNumber")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<long?>("UpdatedById")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("UpdatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("UserId");

                    b.ToTable("Employees", "HR");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedById = 0L,
                            CreatedDate = new DateTimeOffset(new DateTime(2025, 5, 4, 19, 53, 46, 647, DateTimeKind.Unspecified).AddTicks(3701), new TimeSpan(0, 0, 0, 0, 0)),
                            DepartmentId = 1L,
                            FirstName = "Papara",
                            IBAN = "TR000000000000000000000000",
                            IdentityNumber = "23456789012",
                            IsActive = true,
                            LastName = "Admin",
                            UserId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            CreatedById = 0L,
                            CreatedDate = new DateTimeOffset(new DateTime(2025, 5, 4, 19, 53, 46, 647, DateTimeKind.Unspecified).AddTicks(3701), new TimeSpan(0, 0, 0, 0, 0)),
                            DepartmentId = 4L,
                            FirstName = "Özlem",
                            IBAN = "TR000000000000000000000001",
                            IdentityNumber = "12345678901",
                            IsActive = true,
                            LastName = "Kalemci",
                            UserId = 2L
                        },
                        new
                        {
                            Id = 3L,
                            CreatedById = 0L,
                            CreatedDate = new DateTimeOffset(new DateTime(2025, 5, 4, 19, 53, 46, 647, DateTimeKind.Unspecified).AddTicks(3701), new TimeSpan(0, 0, 0, 0, 0)),
                            DepartmentId = 2L,
                            FirstName = "Personel",
                            IBAN = "TR000000000000000000000002",
                            IdentityNumber = "34567890123",
                            IsActive = true,
                            LastName = "Personel",
                            UserId = 3L
                        });
                });

            modelBuilder.Entity("Papara.Domain.Entities.HR.EmployeeAddress", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<long>("CreatedById")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<long?>("DeletedById")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("DeletedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Detail")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("District")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<long>("EmployeeId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<long?>("UpdatedById")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("UpdatedDate")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("EmployeeAddresses", "HR");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            City = "Eskişehir",
                            CreatedById = 0L,
                            CreatedDate = new DateTimeOffset(new DateTime(2025, 5, 4, 19, 53, 46, 646, DateTimeKind.Unspecified).AddTicks(4364), new TimeSpan(0, 0, 0, 0, 0)),
                            Detail = "Çamlıca mahallesi Figen sokak civarı",
                            District = "Tepebaşı",
                            EmployeeId = 2L,
                            IsActive = true
                        },
                        new
                        {
                            Id = 2L,
                            City = "İstanbul",
                            CreatedById = 0L,
                            CreatedDate = new DateTimeOffset(new DateTime(2025, 5, 4, 19, 53, 46, 646, DateTimeKind.Unspecified).AddTicks(4364), new TimeSpan(0, 0, 0, 0, 0)),
                            Detail = "Bahariye Caddesi",
                            District = "Kadıköy",
                            EmployeeId = 3L,
                            IsActive = true
                        });
                });

            modelBuilder.Entity("Papara.Domain.Entities.HR.EmployeePhone", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("CreatedById")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<long?>("DeletedById")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("DeletedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<long>("EmployeeId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("bit");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<byte>("Type")
                        .HasColumnType("tinyint");

                    b.Property<long?>("UpdatedById")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("UpdatedDate")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("EmployeePhones", "HR");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedById = 0L,
                            CreatedDate = new DateTimeOffset(new DateTime(2025, 5, 4, 19, 53, 46, 647, DateTimeKind.Unspecified).AddTicks(7415), new TimeSpan(0, 0, 0, 0, 0)),
                            EmployeeId = 2L,
                            IsActive = true,
                            IsPrimary = true,
                            PhoneNumber = "5551234567",
                            Type = (byte)1
                        },
                        new
                        {
                            Id = 2L,
                            CreatedById = 0L,
                            CreatedDate = new DateTimeOffset(new DateTime(2025, 5, 4, 19, 53, 46, 647, DateTimeKind.Unspecified).AddTicks(7415), new TimeSpan(0, 0, 0, 0, 0)),
                            EmployeeId = 3L,
                            IsActive = true,
                            IsPrimary = true,
                            PhoneNumber = "2129876543",
                            Type = (byte)3
                        });
                });

            modelBuilder.Entity("Base.Domain.Identity.RefreshToken", b =>
                {
                    b.HasOne("Base.Domain.Identity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Expense", b =>
                {
                    b.HasOne("Papara.Domain.Entities.HR.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Papara.Domain.Entities.Finance.ExpenseType", "ExpenseType")
                        .WithMany("Expenses")
                        .HasForeignKey("ExpenseTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("ExpenseType");
                });

            modelBuilder.Entity("ExpenseAttachment", b =>
                {
                    b.HasOne("Expense", "Expense")
                        .WithMany("Attachments")
                        .HasForeignKey("ExpenseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Expense");
                });

            modelBuilder.Entity("Papara.Domain.Entities.Finance.ExpenseApproval", b =>
                {
                    b.HasOne("Expense", "Expense")
                        .WithMany("Approvals")
                        .HasForeignKey("ExpenseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Expense");
                });

            modelBuilder.Entity("Papara.Domain.Entities.HR.Employee", b =>
                {
                    b.HasOne("Papara.Domain.Entities.Corporation.Department", "Department")
                        .WithMany("Employees")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Base.Domain.Identity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Department");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Papara.Domain.Entities.HR.EmployeeAddress", b =>
                {
                    b.HasOne("Papara.Domain.Entities.HR.Employee", "Employee")
                        .WithMany("Addresses")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Papara.Domain.Entities.HR.EmployeePhone", b =>
                {
                    b.HasOne("Papara.Domain.Entities.HR.Employee", "Employee")
                        .WithMany("Phones")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Expense", b =>
                {
                    b.Navigation("Approvals");

                    b.Navigation("Attachments");
                });

            modelBuilder.Entity("Papara.Domain.Entities.Corporation.Department", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("Papara.Domain.Entities.Finance.ExpenseType", b =>
                {
                    b.Navigation("Expenses");
                });

            modelBuilder.Entity("Papara.Domain.Entities.HR.Employee", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Phones");
                });
#pragma warning restore 612, 618
        }
    }
}
