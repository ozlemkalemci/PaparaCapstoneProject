@page "/admin/expense-types"
@using Blazored.Toast.Services
@using Papara.Wasm.Helpers
@using Papara.Wasm.Shared.Models.Expense.ExpenseTypes
@inject HttpClient Http
@inject IToastService Toast

<h3>🗂️ Masraf Türleri</h3>

@if (isLoading)
{
    <p>Yükleniyor...</p>
}
else
{
    <button class="btn btn-success mb-3" @onclick="ShowCreateModal">➕ Yeni Masraf Türü</button>

    <table class="table table-striped">
        <thead>
            <tr>
                <th>Ad</th>
                <th>Açıklama</th>
                <th>İşlemler</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var type in expenseTypes)
            {
                <tr>
                    <td>@type.Name</td>
                    <td>@type.Description</td>
                    <td>
                        <button class="btn btn-warning btn-sm me-2" @onclick="@(() => Edit(type))">Düzenle</button>
                        <button class="btn btn-danger btn-sm" @onclick="@(() => Delete(type.Id))">Sil</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@if (isModalVisible)
{
    <div class="modal show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@modalTitle</h5>
                    <button type="button" class="btn-close" @onclick="CloseModal"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="modalModel" OnValidSubmit="HandleSubmit">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        <InputText class="form-control mb-2" @bind-Value="modalModel.Name" placeholder="Masraf Türü Adı" />
                        <InputTextArea class="form-control mb-2" @bind-Value="modalModel.Description" placeholder="Açıklama" />

                        <button class="btn btn-success">Kaydet</button>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private bool isLoading = true;
    private List<ExpenseTypeResponse> expenseTypes = new();

    private bool isModalVisible = false;
    private string modalTitle = "Yeni Masraf Türü";
    private bool isEditMode = false;

    private long editingId = 0;
    private CreateExpenseTypeRequest modalModel = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        isLoading = true;
        try
        {
            expenseTypes = await Http.GetFromJsonAsync<List<ExpenseTypeResponse>>("expensetypes") ?? new();
        }
        catch
        {
            Toast.ShowError("Veriler yüklenemedi.");
        }
        finally
        {
            isLoading = false;
        }
    }

    private void ShowCreateModal()
    {
        editingId = 0;
        isEditMode = false;
        modalTitle = "Yeni Masraf Türü";
        modalModel = new();
        isModalVisible = true;
    }

    private void Edit(ExpenseTypeResponse type)
    {
        editingId = type.Id;
        isEditMode = true;
        modalTitle = "Masraf Türü Güncelle";
        modalModel = new CreateExpenseTypeRequest
            {
                Name = type.Name,
                Description = type.Description
            };
        isModalVisible = true;
    }

    private void CloseModal()
    {
        isModalVisible = false;
        editingId = 0;
        isEditMode = false;
    }

    private async Task HandleSubmit()
    {
        HttpResponseMessage response;

        if (isEditMode)
        {
            var updateRequest = new UpdateExpenseTypeRequest
                {
                    Name = modalModel.Name,
                    Description = modalModel.Description
                };
            response = await Http.PutAsJsonAsync($"expensetypes/{editingId}", updateRequest);
        }
        else
        {
            response = await Http.PostAsJsonAsync("expensetypes", modalModel);
        }

        if (response.IsSuccessStatusCode)
        {
            Toast.ShowSuccess(isEditMode ? "Güncellendi." : "Eklendi.");
            CloseModal();
            await LoadData();
        }
        else
        {
            await ValidationErrorHelper.ShowErrorsAsync(response, Toast);
        }
    }


    private async Task Delete(long id)
    {
        var response = await Http.DeleteAsync($"expensetypes/{id}");
        if (response.IsSuccessStatusCode)
        {
            Toast.ShowSuccess("Silindi.");
            await LoadData();
        }
        else
        {
            Toast.ShowError("Silme başarısız.");
        }
    }
}
