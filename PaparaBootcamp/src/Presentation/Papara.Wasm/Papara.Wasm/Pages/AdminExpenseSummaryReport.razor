@page "/reports/admin-summary"

@using System.ComponentModel.DataAnnotations
@using System.Reflection
@using Blazored.Toast.Services
@using Papara.Wasm.Extensions
@using Papara.Wasm.Shared.Models.Expense.Reports
@inject HttpClient Http
@inject IToastService Toast

<h3 class="mb-4">🧾 Toplam Masraf Yoğunluğu</h3>

<div class="mb-3">
    <label>Dönem:</label>
    <select @bind="selectedPeriod" @bind:after="LoadData" class="form-select">
        @foreach (ReportPeriod period in Enum.GetValues(typeof(ReportPeriod)))
        {
            <option value="@period">@period.GetDisplayName()</option>
        }
    </select>
</div>

@if (isLoading)
{
    <p>Yükleniyor...</p>
}
else if (summaryList?.Any() != true)
{
    <p>Veri bulunamadı.</p>
}
else
{
    <table class="table table-bordered table-striped">
        <thead>
            <tr>
                <th>Dönem</th>
                <th>Toplam Tutar</th>
                <th>Masraf Sayısı</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in summaryList)
            {
                <tr>
                    <td>@item.Period.GetDisplayName()</td>
                    <td>@item.TotalAmount.ToString("C")</td>
                    <td>@item.ExpenseCount</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private bool isLoading = true;
    private ReportPeriod selectedPeriod = ReportPeriod.Daily;
    private List<AdminExpenseSummaryResponse>? summaryList;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        isLoading = true;

        try
        {
            var url = $"expensereports/admin-summary?Period={selectedPeriod}";
            summaryList = await Http.GetFromJsonAsync<List<AdminExpenseSummaryResponse>>(url);
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine("Rapor verileri alınırken hata oluştu: " + ex.Message);
            Toast.ShowError("Rapor yüklenemedi.");
        }
        finally
        {
            isLoading = false;
        }
    }
}
