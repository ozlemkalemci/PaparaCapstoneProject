@page "/reports/personnel-expense-history-admin"

<h3 class="mb-4">📋 Personel Masraf Geçmişi</h3>

@using System.ComponentModel.DataAnnotations
@using System.Reflection
@using Blazored.Toast.Services
@using Papara.Wasm.Extensions
@using Papara.Wasm.Shared.Models.Expense.Employees
@using Papara.Wasm.Shared.Models.Expense.Reports
@inject HttpClient Http
@inject IToastService Toast

<div class="mb-3">
    <label>Personel Seç:</label>
    <select class="form-select" @onchange="OnEmployeeChanged">
        <option value="">-- Personel Seçiniz --</option>
        @foreach (var employee in employees)
        {
            <option value="@employee.Id">@($"{employee.FirstName} {employee.MiddleName} {employee.LastName}".Replace("  ", " "))</option>
        }
    </select>
</div>

@if (isLoading)
{
    <p>Yükleniyor...</p>
}
else if (expenses?.Any() != true)
{
    <p>Masraf bulunamadı.</p>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Tarih</th>
                <th>Tutar</th>
                <th>Durum</th>
                <th>Kategori</th>
                <th>Açıklama</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var expense in expenses)
            {
                <tr>
                    <td>@expense.ExpenseDate.ToString("dd.MM.yyyy")</td>
                    <td>@expense.Amount.ToString("C")</td>
                    <td>@expense.Status.GetDisplayName()</td>
                    <td>@expense.ExpenseType</td>
                    <td>@expense.Description</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<EmployeeResponse> employees = new();
    private List<PersonnelExpenseReportResponse>? expenses;
    private long? selectedEmployeeId;
    private bool isLoading = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadEmployeesAsync();
    }

    private async Task LoadEmployeesAsync()
    {
        try
        {
            employees = await Http.GetFromJsonAsync<List<EmployeeResponse>>("employees?IncludeDepartment=false") ?? new();
        }
        catch (Exception ex)
        {
            Toast.ShowError("Personel listesi yüklenemedi.");
            Console.Error.WriteLine("Hata: " + ex.Message);
        }
    }

    private async Task LoadExpensesAsync()
    {
        if (selectedEmployeeId == null)
        {
            expenses = null;
            return;
        }

        isLoading = true;

        try
        {
            var url = $"expensereports/personnel-expense-history?EmployeeId={selectedEmployeeId}";
            expenses = await Http.GetFromJsonAsync<List<PersonnelExpenseReportResponse>>(url);
        }
        catch (Exception ex)
        {
            Toast.ShowError("Masraf verisi alınamadı.");
            Console.Error.WriteLine("Hata: " + ex.Message);
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task OnEmployeeChanged(ChangeEventArgs e)
    {
        if (long.TryParse(e.Value?.ToString(), out var id))
        {
            selectedEmployeeId = id;
            await LoadExpensesAsync();
        }
    }
}
