@page "/employee/create-user/{EmployeeId:long}"
@using System.Net.Http.Json
@using Papara.Wasm.Extensions
@using Papara.Wasm.Shared.Models.Auth
@using Blazored.Toast.Services
@inject HttpClient Http
@inject NavigationManager Navigation
@inject IToastService Toast

<h3>➕ Kullanıcı Oluştur</h3>

@if (isSubmitting)
{
	<p>İşlem yapılıyor...</p>
}
else
{
	<EditForm Model="registerRequest" OnValidSubmit="HandleValidSubmit">
		<DataAnnotationsValidator />
		<ValidationSummary />

		<div class="mb-3">
			<label>Kullanıcı Adı</label>
			<InputText class="form-control" @bind-Value="registerRequest.UserName" />
		</div>

		<div class="mb-3">
			<label>Şifre</label>
			<InputText type="password" class="form-control" @bind-Value="registerRequest.Password" />
		</div>

		<div class="mb-3">
			<label>E-Posta</label>
			<InputText type="email" class="form-control" @bind-Value="registerRequest.Email" />
		</div>

		<div class="mb-3">
			<label>Rol</label>
			<InputSelect class="form-control" @bind-Value="registerRequest.Role">
				<option value="">Seçiniz</option>
				@foreach (UserRole role in Enum.GetValues(typeof(UserRole)))
				{
					<option value="@role.ToString()">@role.GetDisplayName()</option>

				}
			</InputSelect>

		</div>

		<button type="submit" class="btn btn-success">Kaydet</button>
		<button type="button" class="btn btn-secondary ms-2" @onclick="GoBack">İptal</button>
	</EditForm>
}

@code {
	[Parameter] public long EmployeeId { get; set; }

	private RegisterRequest registerRequest = new();
	private bool isSubmitting = false;

	private async Task HandleValidSubmit()
	{
		isSubmitting = true;

		try
		{
			var payload = new EmployeeUserRequest
				{
					EmployeeId = EmployeeId,
					Request = registerRequest
				};

			var response = await Http.PostAsJsonAsync("employee-users", payload);

			if (response.IsSuccessStatusCode)
			{
				Toast.ShowSuccess("Kullanıcı başarıyla oluşturuldu.");
				Navigation.NavigateTo("/employee/profile", forceLoad: true);
			}
			else
			{
				var error = await response.Content.ReadAsStringAsync();
				Toast.ShowError($"Hata: {error}");
			}
		}
		catch (Exception ex)
		{
			Toast.ShowError("Kullanıcı oluşturulurken bir hata oluştu.");
			Console.Error.WriteLine(ex);
		}
		finally
		{
			isSubmitting = false;
		}
	}


	private void GoBack()
	{
		Navigation.NavigateTo("/employee/profile");
	}
}
